/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface SrAutocomplete {
        "allowFreeText": boolean;
        "resetInput": () => Promise<void>;
        "suggestions": string[];
    }
}
export interface SrAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSrAutocompleteElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSrAutocompleteElementEventMap {
        "select": string;
    }
    interface HTMLSrAutocompleteElement extends Components.SrAutocomplete, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSrAutocompleteElementEventMap>(type: K, listener: (this: HTMLSrAutocompleteElement, ev: SrAutocompleteCustomEvent<HTMLSrAutocompleteElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSrAutocompleteElementEventMap>(type: K, listener: (this: HTMLSrAutocompleteElement, ev: SrAutocompleteCustomEvent<HTMLSrAutocompleteElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSrAutocompleteElement: {
        prototype: HTMLSrAutocompleteElement;
        new (): HTMLSrAutocompleteElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "sr-autocomplete": HTMLSrAutocompleteElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface SrAutocomplete {
        "allowFreeText"?: boolean;
        "onSelect"?: (event: SrAutocompleteCustomEvent<string>) => void;
        "suggestions"?: string[];
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "sr-autocomplete": SrAutocomplete;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "sr-autocomplete": LocalJSX.SrAutocomplete & JSXBase.HTMLAttributes<HTMLSrAutocompleteElement>;
        }
    }
}
